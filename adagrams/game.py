import random

def draw_letters():
 
    NUM_TILES = 10
    letters_grabbed = []
    letters_remaining_pool = LIST_OF_LETTERS.copy()
    
    for i in range(NUM_TILES):
        # update the last index of the remaining pool list that changes everytime
        # random.randint stop is inclusive, so -1 which reflect the size of the pool
        index = len(letters_remaining_pool)-1
        # pop() allows to return the letter that was taken out and update the remaining pool list
        letter_grabbed = letters_remaining_pool.pop(random.randint(0,index))
        letters_grabbed.append(letter_grabbed)

    return(letters_grabbed)

def uses_available_letters(word, letter_bank):

    word = word.upper()
    letter_bank_remaining = letter_bank.copy()

    for letter in word:
        # prevent the tiles that are used being used again ie "DOOR" cannot be made with D,O,R,X,X,X
        if letter in letter_bank_remaining:
            letter_bank_remaining.remove(letter)
        else:
            return False
    return True


def score_word(word):
    
    score = 0
    word = word.upper()
    for letter in word:
        # score saved as values to the keys(letter)
        score += VALUES_DICT[letter]
    if len(word) >= 7:
        score += 8
    return score


def get_highest_word_score(word_list):
    max_score = 0
    max_word = ""

    for word in word_list:
        score = score_word(word)
        # print(word, score, len(word))
        
        # if the score is greater than the current max, make it the new man
        if score > max_score:
            max_score = score
            max_word = word
        # if the scores are equal, have conditionals for tie breakers
        elif score == max_score:
            # if scores are the same but the existing max word lg is 10, or if theyre the same length
            if len(max_word) == 10 or len(word) == len(max_word):
                # when they are the same length (and score), then choose the first instance
                # which would be the current max word
                # continue skips over this loop to the next word in either cases
                continue
            # if scores are the same, but the new word is 10 or longer than the current max word
            elif len(word) == 10 or len(word) < len(max_word):
                # the score becomes the max word
                max_score = score
                max_word = word

    return max_word, max_score    
        
# generated by the function at the end
# saved as constant list rather than a dict, bc it was an easier data structure
# the list is unchanged so every function call, it goes back to this
LIST_OF_LETTERS = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'N', 'N', 'N', 'N', 'N', 'N', 'B', 'B', 
                    'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'C', 'C', 'P', 'P', 'D', 'D', 'D', 'D', 'Q', 
                    'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'R', 'R', 'R', 'R', 'R', 
                    'R', 'F', 'F', 'S', 'S', 'S', 'S', 'G', 'G', 'G', 'T', 'T', 'T', 'T', 'T', 'T', 'H', 
                    'H', 'U', 'U', 'U', 'U', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'V', 'V', 'J', 
                    'W', 'W', 'K', 'X', 'L', 'L', 'L', 'L', 'Y', 'Y', 'M', 'M', 'Z']



VALUES_DICT = {
    'A': 1, 
    'B': 3, 
    'C': 3, 
    'D': 2, 
    'E': 1, 
    'F': 4, 
    'G': 2, 
    'H': 4, 
    'I': 1, 
    'J': 8, 
    'K': 5, 
    'L': 1, 
    'M': 3, 
    'N': 1, 
    'O': 1, 
    'P': 3, 
    'Q': 10, 
    'R': 1, 
    'S': 1, 
    'T': 1, 
    'U': 1, 
    'V': 4, 
    'W': 4, 
    'X': 8, 
    'Y': 4, 
    'Z': 10
}


# letters= {
#     'A' : 9,	'N' : 6,
#     'B' : 2,    'O' : 8,
#     'C' : 2,    'P' : 2,
#     'D' : 4,    'Q' : 1,
#     'E': 12, 	'R' : 6,
#     'F' : 2,   	'S' : 4,
#     'G' : 3,	'T' : 6,
#     'H' : 2,	'U' : 4,
#     'I' : 9,	'V' : 2,
#     'J' : 1,	'W' : 2,
#     'K' : 1,	'X' : 1,
#     'L' : 4,	'Y' : 2,
#     'M' : 2,	'Z' : 1
# }
# list_letters = []
# count = 0
# for letter, num in letters.items():
#     for i in range(num):
#         list_letters.append(letter)
# print(len(list_letters))
